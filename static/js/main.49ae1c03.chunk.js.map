{"version":3,"sources":["App.js","index.js"],"names":["ICONS","default","museum","bridge","cathedral","church","street","village","residence","castle","park","synagogue","power","cemetery","metro","university","architectural","railway","WARSAW_COORDS","AVAILABLE_KEYWORDS","Object","keys","findKeyword","string","keyword","toLowerCase","indexOf","getRandomNumberBetween","min","max","Math","random","App","React","coords","setCoords","pages","setPages","fetch","URLSearchParams","origin","action","format","prop","generator","ggscoord","join","ggsradius","then","res","json","parsedPages","values","query","map","page","id","pageid","toString","label","terms","description","forEach","catch","console","log","className","onClick","JSON","stringify","ReactDOM","document","getElementById"],"mappings":"uLAEMA,EAAQ,CACZC,QAAS,SACTC,OAAQ,qBACRC,OAAQ,eACRC,UAAW,SACXC,OAAQ,SACRC,OAAQ,qBACRC,QAAS,eACTC,UAAW,eACXC,OAAQ,eACRC,KAAM,eACNC,UAAW,eACXC,MAAO,SACPC,SAAU,eACVC,MAAO,eACPC,WAAY,eACZC,cAAe,qBACfC,QAAS,gBAGLC,EAAgB,CAAC,mBAAoB,oBA+E3C,IAAMC,EAAqBC,OAAOC,KAAKrB,GAMvC,SAASsB,EAAYC,GAAS,IAAD,gBACPJ,GADO,IAC3B,2BAAwC,CAAC,IAAhCK,EAA+B,QAGtC,IAFgE,IAA3CD,EAAOE,cAAcC,QAAQF,GAGhD,OAAOA,GALgB,8BAQ3B,OAAO,KAaT,SAASG,EAAuBC,EAAKC,GACnC,OAAOC,KAAKC,UAAYF,EAAMD,GAAOA,EAGxBI,MA5Gf,WAAgB,IAAD,EACeC,WAAef,GAD9B,mBACNgB,EADM,KACEC,EADF,OAEaF,WAAe,IAF5B,mBAENG,EAFM,KAECC,EAFD,KA2Db,OAvDAJ,aAAgB,WACdK,MACE,sCACE,IAAIC,gBAAgB,CAClBC,OAAQ,IACRC,OAAQ,QACRC,OAAQ,OACRC,KAAM,YACNC,UAAW,YAGXC,SAAUX,EAAOY,KAAK,KACtBC,UAAW,OAGdC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAS,IAAD,EAINC,EAHe/B,OAAOgC,QAAO,UAAAF,EAAKG,aAAL,eAAYjB,QAAS,IAGvBkB,KAAI,SAAAC,GAAI,YAAK,CAC5CC,GAAID,EAAKE,OAAOC,WAChBC,MAAOJ,EAAKK,MAAMD,MAAM,GACxBE,YAAW,UAAEN,EAAKK,MAAMC,mBAAb,aAAE,EAAyB,OAIxCV,EAAYW,SAAQ,SAAAP,GAAS,IAEvB/B,EADImC,EAAuBJ,EAAvBI,MAAOE,EAAgBN,EAAhBM,YAIXA,IACFrC,EAAUF,EAAYuC,IAKnBrC,IACHA,EAAUF,EAAYqC,IAKnBnC,IACHA,EAAU,WAEZ+B,EAAK/B,QAAUA,KAGjBa,EAASc,MAEVY,MAAMC,QAAQC,OAChB,CAAC/B,IAGF,sBAAKgC,UAAU,MAAf,UACE,yDACA,wBAAQC,QAAS,kBAAMhC,EAoCpB,CACLR,EAAuB,UAAW,UAClCA,EAAuB,UAAW,cAtChC,oBACA,6BACGS,EAAMkB,KAAI,gBAAGE,EAAH,EAAGA,GAAIG,EAAP,EAAOA,MAAOnC,EAAd,EAAcA,QAAd,OACT,6BACE,+BACGxB,EAAMwB,GADT,IACoBmC,MAFbH,QAOb,8BAAMY,KAAKC,UAAUjC,EAAO,KAAM,SC5FxCkC,SACE,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.49ae1c03.chunk.js","sourcesContent":["import * as React from 'react';\n\nconst ICONS = {\n  default: '❓',\n  museum: '🖼️',\n  bridge: '🌉',\n  cathedral: '⛪',\n  church: '⛪',\n  street: '🛣️',\n  village: '🌻',\n  residence: '🏠',\n  castle: '🏰',\n  park: '🌳',\n  synagogue: '🕍',\n  power: '⚡',\n  cemetery: '⚰️',\n  metro: '🚇',\n  university: '🎓',\n  architectural: '🏛️',\n  railway: '🚂',\n};\n\nconst WARSAW_COORDS = [52.247744131869645, 21.015043804607192];\n\nfunction App() {\n  const [coords, setCoords] = React.useState(WARSAW_COORDS);\n  const [pages, setPages] = React.useState([]);\n\n  React.useEffect(() => {\n    fetch(\n      'https://en.wikipedia.org/w/api.php?' +\n        new URLSearchParams({\n          origin: '*',\n          action: 'query',\n          format: 'json',\n          prop: 'pageterms',\n          generator: 'geosearch',\n\n          // Arbitrary coordinates in Warsaw\n          ggscoord: coords.join('|'),\n          ggsradius: 2000,\n        }),\n    )\n      .then(res => res.json())\n      .then(json => {\n        const fetchedPages = Object.values(json.query?.pages || []);\n\n        // Extract only needed data\n        const parsedPages = fetchedPages.map(page => ({\n          id: page.pageid.toString(),\n          label: page.terms.label[0],\n          description: page.terms.description?.[0],\n        }));\n\n        // Try to find matching keyword for each page\n        parsedPages.forEach(page => {\n          const { label, description } = page;\n          let keyword;\n          // If there is description the keyword is most likely to be there\n          // so check it first\n          if (description) {\n            keyword = findKeyword(description);\n          }\n\n          // If there is still no keyword. Either because there is no description\n          // or because keyword was not found there.\n          if (!keyword) {\n            keyword = findKeyword(label);\n          }\n\n          // Finally, if the keyword was not found both in label and description\n          // use default one.\n          if (!keyword) {\n            keyword = 'default';\n          }\n          page.keyword = keyword;\n        });\n\n        setPages(parsedPages);\n      })\n      .catch(console.log);\n  }, [coords]);\n\n  return (\n    <div className=\"App\">\n      <h1>Icons For Wiki Articles</h1>\n      <button onClick={() => setCoords(getRandomCoords())}>Random</button>\n      <ul>\n        {pages.map(({ id, label, keyword }) => (\n          <li key={id}>\n            <h2>\n              {ICONS[keyword]} {label}\n            </h2>\n          </li>\n        ))}\n      </ul>\n      <pre>{JSON.stringify(pages, null, 2)}</pre>\n    </div>\n  );\n}\n\nconst AVAILABLE_KEYWORDS = Object.keys(ICONS);\n\n/**\n * Looks for matching keyword in the given string. If the keyword is found\n * it returns it.\n */\nfunction findKeyword(string) {\n  for (let keyword of AVAILABLE_KEYWORDS) {\n    const keywordFound = string.toLowerCase().indexOf(keyword) !== -1;\n\n    if (keywordFound) {\n      return keyword;\n    }\n  }\n  return null;\n}\n\n/**\n * It returns random coordinates close to Warsaw's city centre\n */\nfunction getRandomCoords() {\n  return [\n    getRandomNumberBetween(52.156111, 52.24903),\n    getRandomNumberBetween(21.004021, 21.105173),\n  ];\n}\n\nfunction getRandomNumberBetween(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}