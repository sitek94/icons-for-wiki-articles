{"version":3,"sources":["components/IconButton.js","icons/index.js","utils.js","App.js","index.js"],"names":["IconButton","children","React","isClicked","setIsClicked","onClick","style","border","outline","background","color","fontSize","icons","architectural","bank","battle","bridge","castle","cathedral","cemetery","church","default","department","district","metro","monument","museum","neighborhood","neighbourhood","palace","park","railway","research","residence","street","synagogue","university","village","availableKeywords","Object","keys","findKeyword","string","keyword","toLowerCase","indexOf","getRandomNumberBetween","min","max","Math","random","warsawCoords","lat","lng","App","coords","setCoords","pages","setPages","fetch","URLSearchParams","origin","action","format","prop","generator","ggscoord","ggsradius","then","res","json","parsedPages","values","query","map","page","id","pageid","toString","label","terms","description","forEach","catch","console","log","radiusInDeg","getRandomCoords","display","alignItems","JSON","stringify","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e63f5449.chunk.js","sourcesContent":["import * as React from 'react';\r\n\r\nexport default function IconButton({ children }) {\r\n  const [isClicked, setIsClicked] = React.useState(false);\r\n\r\n  return (\r\n    <button\r\n      onClick={() => setIsClicked(!isClicked)}\r\n      style={{\r\n        border: 'none',\r\n        outline: 'none',\r\n        background: 'none',\r\n        color: isClicked ? 'cornflowerblue' : 'black',\r\n        fontSize: 30,\r\n      }}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n}\r\n","import {\r\n  FaCircle,\r\n  FaChurch,\r\n  FaMonument,\r\n  FaRoad,\r\n  FaTree,\r\n  FaSynagogue,\r\n  FaSubway,\r\n  FaUniversity,\r\n  FaTrain,\r\n  FaLandmark,\r\n  FaMusic,\r\n  FaPiggyBank,\r\n  FaBuilding,\r\n} from 'react-icons/fa';\r\nimport {\r\n  GiCastle,\r\n  GiChurch,\r\n  GiCoffin,\r\n  GiFamilyHouse,\r\n  GiStoneBridge,\r\n  GiSwordsEmblem,\r\n  GiVillage,\r\n} from 'react-icons/gi';\r\nimport { ImPower } from 'react-icons/im';\r\nimport { SiInternetarchive } from 'react-icons/si';\r\nimport { AiTwotoneExperiment } from 'react-icons/ai';\r\nimport { BiBuildingHouse, BiMapPin } from 'react-icons/bi';\r\nimport { GoRadioTower } from 'react-icons/go';\r\n\r\nconst icons = {\r\n  architectural: <SiInternetarchive />,\r\n  bank: <FaPiggyBank />,\r\n  battle: <GiSwordsEmblem />,\r\n  bridge: <GiStoneBridge />,\r\n  castle: <GiCastle />,\r\n  cathedral: <GiChurch />,\r\n  cemetery: <GiCoffin />,\r\n  church: <FaChurch />,\r\n  default: <FaCircle />,\r\n  department: <FaBuilding />,\r\n  district: <BiMapPin />,\r\n  metro: <FaSubway />,\r\n  monument: <FaMonument />,\r\n  museum: <FaLandmark />,\r\n  neighborhood: <BiBuildingHouse />,\r\n  neighbourhood: <BiBuildingHouse />,\r\n  palace: <GiFamilyHouse />,\r\n  park: <FaTree />,\r\n  'power station': <ImPower />,\r\n  railway: <FaTrain />,\r\n  'radio station': <GoRadioTower />,\r\n  'record label': <FaMusic />,\r\n  research: <AiTwotoneExperiment />,\r\n  residence: <GiFamilyHouse />,\r\n  street: <FaRoad />,\r\n  synagogue: <FaSynagogue />,\r\n  university: <FaUniversity />,\r\n  village: <GiVillage />,\r\n};\r\n\r\nexport default icons;\r\n","import icons from './icons';\r\n\r\nconst availableKeywords = Object.keys(icons);\r\n\r\n/**\r\n * Tries to find a keyword in a string that will match one of the available\r\n * keywords.\r\n *\r\n * @param string a string to look for a keyword\r\n * @param availableKeywords a list of available keywords\r\n */\r\nexport function findKeyword(string) {\r\n  for (let keyword of availableKeywords) {\r\n    const keywordFound = string.toLowerCase().indexOf(keyword) !== -1;\r\n\r\n    if (keywordFound) {\r\n      return keyword;\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * Returns random coordinates around given point, in the given radius\r\n */\r\nexport function getRandomCoords({ lat, lng }, radiusInMeters = 1000) {\r\n  // Approximate degree equivalent for meters\r\n  const radiusInDeg = radiusInMeters / 100000;\r\n\r\n  return {\r\n    lat: getRandomNumberBetween(lat - radiusInDeg, lat + radiusInDeg),\r\n    lng: getRandomNumberBetween(lng - radiusInDeg, lng + radiusInDeg),\r\n  };\r\n}\r\n\r\nfunction getRandomNumberBetween(min, max) {\r\n  return Math.random() * (max - min) + min;\r\n}\r\n","import * as React from 'react';\nimport IconButton from './components/IconButton';\n\nimport icons from './icons';\nimport { findKeyword, getRandomCoords } from './utils';\n\nconst warsawCoords = {\n  lat: 52.247744131869645,\n  lng: 21.015043804607192,\n};\n\nfunction App() {\n  const [coords, setCoords] = React.useState(warsawCoords);\n  const [pages, setPages] = React.useState([]);\n\n  React.useEffect(() => {\n    fetch(\n      'https://en.wikipedia.org/w/api.php?' +\n        new URLSearchParams({\n          origin: '*',\n          action: 'query',\n          format: 'json',\n          prop: 'pageterms',\n          generator: 'geosearch',\n\n          // Arbitrary coordinates in Warsaw\n          ggscoord: coords.lat + '|' + coords.lng,\n          ggsradius: 2000,\n        }),\n    )\n      .then(res => res.json())\n      .then(json => {\n        const fetchedPages = Object.values(json.query?.pages || []);\n\n        // Extract only needed data\n        const parsedPages = fetchedPages.map(page => ({\n          id: page.pageid.toString(),\n          label: page.terms.label[0],\n          description: page.terms.description?.[0],\n        }));\n\n        // Try to find matching keyword for each page\n        parsedPages.forEach(page => {\n          const { label, description } = page;\n          let keyword;\n          // If there is description the keyword is most likely to be there\n          // so check it first\n          if (description) {\n            keyword = findKeyword(description);\n          }\n\n          // If there is still no keyword. Either because there is no description\n          // or because keyword was not found there.\n          if (!keyword) {\n            keyword = findKeyword(label);\n          }\n\n          // Finally, if the keyword was not found both in label and description\n          // use default one.\n          if (!keyword) {\n            keyword = 'default';\n          }\n          page.keyword = keyword;\n        });\n\n        setPages(parsedPages);\n      })\n      .catch(console.log);\n  }, [coords]);\n\n  return (\n    <>\n      <h1>Icons For Wiki Articles</h1>\n\n      <button onClick={() => setCoords(getRandomCoords(warsawCoords))}>\n        Get random coordinates in Warsaw\n      </button>\n\n      {pages.map(({ id, label, keyword }) => (\n        <div key={id} style={{ display: 'flex', alignItems: 'center' }}>\n          <IconButton>{icons[keyword]}</IconButton>\n          <h2>{label}</h2>\n        </div>\n      ))}\n\n      <pre>{JSON.stringify(pages, null, 2)}</pre>\n    </>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}